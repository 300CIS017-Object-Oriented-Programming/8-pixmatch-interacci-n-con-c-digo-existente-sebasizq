import streamlit as st
import os
import time as tm
import random
import base64
import json
from PIL import Image
from streamlit_autorefresh import st_autorefresh
# Configuracion de los atributos generales de la p√°gina
st.set_page_config(page_title = "PixMatch", page_icon="üïπÔ∏è", layout = "wide", initial_sidebar_state = "expanded")

# Obtener la unidad de disco donde se encuentra el directorio actual
vDrive = os.path.splitdrive(os.getcwd())[0]

#if vDrive == "C:": vpth = "C:/Users/Shawn/dev/utils/pixmatch/"   # local developer's disc
#else:

#establecer la ruta del directorio local del desarrollador
vpth = "./"

# crea la plantilla para un estilo de texto grande
sbe = """<span style='font-size: 140px;
                      border-radius: 7px;
                      text-align: center;
                      display:inline;
                      padding-top: 3px;
                      padding-bottom: 3px;
                      padding-left: 0.4em;
                      padding-right: 0.4em;
                      '>
                      |fill_variable|
                      </span>"""

# crea la plantilla para un estilo para emojis
pressed_emoji = """<span style='font-size: 24px;
                                border-radius: 7px;
                                text-align: center;
                                display:inline;
                                padding-top: 3px;
                                padding-bottom: 3px;
                                padding-left: 0.2em;
                                padding-right: 0.2em;
                                '>
                                |fill_variable|
                                </span>"""

# L√≠nea divisoria delgada
horizontal_bar = "<hr style='margin-top: 0; margin-bottom: 0; height: 1px; border: 1px solid #635985;'><br>"

#Estilo para el color del boton purpura
purple_btn_colour = """
                        <style>
                            div.stButton > button:first-child {background-color: #4b0082; color:#ffffff;}
                            div.stButton > button:hover {background-color: RGB(0,112,192); color:#ffffff;}
                            div.stButton > button:focus {background-color: RGB(47,117,181); color:#ffffff;}
                        </style>
                    """

#Estado de la sesion
mystate = st.session_state
# Si no existen las siguientes claves en el estado de la sesi√≥n, se inicializan con valores predeterminados
if "expired_cells" not in mystate: mystate.expired_cells = []
if "myscore" not in mystate: mystate.myscore = 0
if "plyrbtns" not in mystate: mystate.plyrbtns = {}
if "sidebar_emoji" not in mystate: mystate.sidebar_emoji = ''
if "emoji_bank" not in mystate: mystate.emoji_bank = []
if "GameDetails" not in mystate: mystate.GameDetails = ['Medium', 6, 7, '']  # Nivel de dificultad, intervalo de segundos para autogeneraci√≥n, celdas totales por fila o columna, nombre del jugador

# common functions
def ReduceGapFromPageTop(wch_section='main page'):
    """
    Reduce el espacio desde la parte superior de la p√°gina ajustando el relleno de la secci√≥n especificada.
    """
    if wch_section == 'main page':
        # √°rea principal
        st.markdown(" <style> div[class^='block-container'] { padding-top: 2rem; } </style> ", True)
    elif wch_section == 'sidebar':
        # barra lateral
        st.markdown(" <style> div[class^='st-emotion-cache-10oheav'] { padding-top: 0rem; } </style> ", True)
    elif wch_section == 'all':
        # √°rea principal
        st.markdown(" <style> div[class^='block-container'] { padding-top: 2rem; } </style> ", True)
        # barra lateral
        st.markdown(" <style> div[class^='st-emotion-cache-10oheav'] { padding-top: 0rem; } </style> ", True)


def Leaderboard(what_to_do):
    """
    Gestiona la creaci√≥n, escritura y lectura del marcador.
    Parametros:
        what_to_do el string representa la accion a realizar ('create' para crear, 'write' para escribir, 'read' para leer).
    """
    if what_to_do == 'create':
        # Crea un archivo de marcador si no existe y el nombre del jugador est√° disponible
        if mystate.GameDetails[3] != '':
            if os.path.isfile(vpth + 'leaderboard.json') == False:
                tmpdict = {}
                json.dump(tmpdict, open(vpth + 'leaderboard.json', 'w'))  # write file

    elif what_to_do == 'write':
        # Escribe en el marcador si el nombre del jugador est√° disponible
        if mystate.GameDetails[3] != '':
            if os.path.isfile(vpth + 'leaderboard.json'):
                leaderboard = json.load(open(vpth + 'leaderboard.json'))  # lee un archivo
                leaderboard_dict_lngth = len(leaderboard)

                leaderboard[str(leaderboard_dict_lngth + 1)] = {'NameCountry': mystate.GameDetails[3],'HighestScore': mystate.myscore}
                leaderboard = dict(sorted(leaderboard.items(), key=lambda item: item[1]['HighestScore'], reverse=True))  # ordena decendentemente

                if len(leaderboard) > 4:
                    for i in range(len(leaderboard) - 4):
                        leaderboard.popitem()

                json.dump(leaderboard, open(vpth + 'leaderboard.json', 'w'))  # escribe en el archivo

    elif what_to_do == 'read':
        # Lee el marcador si el nombre del jugador est√° disponible
        if mystate.GameDetails[3] != '':
            if os.path.isfile(vpth + 'leaderboard.json'):
                leaderboard = json.load(open(vpth + 'leaderboard.json'))  # lee el archivo

                leaderboard = dict(
                    sorted(leaderboard.items(), key=lambda item: item[1]['HighestScore'], reverse=True))  # ordena decendente

                sc0, sc1, sc2, sc3, sc4 = st.columns((2, 3, 3, 3, 3))
                rknt = 0
                for vkey in leaderboard.keys():
                    if leaderboard[vkey]['NameCountry'] != '':
                        rknt += 1
                        if rknt == 1:
                            sc0.write('üèÜ Past Winners:')
                            sc1.write(f"ü•á | {leaderboard[vkey]['NameCountry']}: :red[{leaderboard[vkey]['HighestScore']}]")
                        elif rknt == 2:
                            sc2.write(f"ü•à | {leaderboard[vkey]['NameCountry']}: :red[{leaderboard[vkey]['HighestScore']}]")
                        elif rknt == 3: sc3.write(f"ü•â | {leaderboard[vkey]['NameCountry']}: :red[{leaderboard[vkey]['HighestScore']}]")
                        elif rknt == 4:
                            sc4.write(f"ü•â | {leaderboard[vkey]['NameCountry']}: :red[{leaderboard[vkey]['HighestScore']}]")

def InitialPage():
    """
       Define la p√°gina inicial del juego Pix Match.
    """
    with st.sidebar:
        st.subheader("üñºÔ∏è Pix Match:")
        st.markdown(horizontal_bar, True)

        # sidebarlogo = Image.open('sidebarlogo.jpg').resize((300, 420))
        sidebarlogo = Image.open('sidebarlogo.jpg').resize((300, 390))
        st.image(sidebarlogo, use_column_width='auto')

    # ViewHelp
    hlp_dtl = f"""<span style="font-size: 26px;">
    <ol>
    <li style="font-size:15px";>Game play opens with (a) a sidebar picture and (b) a N x N grid of picture buttons, where N=6:Easy, N=7:Medium, N=8:Hard.</li>
    <li style="font-size:15px";>You need to match the sidebar picture with a grid picture button, by pressing the (matching) button (as quickly as possible).</li>
    <li style="font-size:15px";>Each correct picture match will earn you <strong>+N</strong> points (where N=5:Easy, N=3:Medium, N=1:Hard); each incorrect picture match will earn you <strong>-1</strong> point.</li>
    <li style="font-size:15px";>The sidebar picture and the grid pictures will dynamically regenerate after a fixed seconds interval (Easy=8, Medium=6, Hard=5). Each regeneration will have a penalty of <strong>-1</strong> point</li>
    <li style="font-size:15px";>Each of the grid buttons can only be pressed once during the entire game.</li>
    <li style="font-size:15px";>The game completes when all the grid buttons are pressed.</li>
    <li style="font-size:15px";>At the end of the game, if you have a positive score, you will have <strong>won</strong>; otherwise, you will have <strong>lost</strong>.</li>
    </ol></span>""" 

    sc1, sc2 = st.columns(2)
    random.seed()
    GameHelpImg = vpth + random.choice(["MainImg1.jpg", "MainImg2.jpg", "MainImg3.jpg", "MainImg4.jpg"])
    GameHelpImg = Image.open(GameHelpImg).resize((550, 550))
    sc2.image(GameHelpImg, use_column_width='auto')

    sc1.subheader('Rules | Playing Instructions:')
    sc1.markdown(horizontal_bar, True)
    sc1.markdown(hlp_dtl, unsafe_allow_html=True)
    st.markdown(horizontal_bar, True)

    author_dtl = "<strong>Happy Playing: üòé Shawn Pereira: shawnpereira1969@gmail.com</strong>"
    st.markdown(author_dtl, unsafe_allow_html=True)

def ReadPictureFile(wch_fl):
    """
    Lee un archivo de imagen y devuelve su representacion en base64.
    """
    try:
        pxfl = f"{vpth}{wch_fl}"  # Obtiene la ruta completa del archivo de imagen.
        return base64.b64encode(open(pxfl, 'rb').read()).decode()  # Lee el archivo de imagen, lo codifica en base64 y lo devuelve como una cadena.

    except:
        return ""  # Devuelve una cadena vac√≠a si hay alg√∫n error durante la lectura del archivo de imagen.


def PressedCheck(vcell):
    """
    Verifica si un bot√≥n de celda ha sido presionado y realiza las acciones correspondientes.

    """
    if mystate.plyrbtns[vcell]['isPressed'] == False:  # Verifica si el bot√≥n de la celda a√∫n no ha sido presionado.
        mystate.plyrbtns[vcell]['isPressed'] = True  # Marca el bot√≥n de la celda como presionado.
        mystate.expired_cells.append(vcell)  # Agrega el √≠ndice de la celda a la lista de celdas expiradas.

        if mystate.plyrbtns[vcell][
            'eMoji'] == mystate.sidebar_emoji:  # Verifica si el emoji del bot√≥n coincide con el emoji de la barra lateral.
            mystate.plyrbtns[vcell]['isTrueFalse'] = True  # Marca el resultado como verdadero.
            mystate.myscore += 5  # Aumenta la puntuaci√≥n en 5 puntos.

            # Ajusta la puntuaci√≥n seg√∫n la dificultad del juego.
            if mystate.GameDetails[0] == 'Easy':
                mystate.myscore += 5
            elif mystate.GameDetails[0] == 'Medium':
                mystate.myscore += 3
            elif mystate.GameDetails[0] == 'Hard':
                mystate.myscore += 1

        else:  # Si el emoji del bot√≥n no coincide con el emoji de la barra lateral.
            mystate.plyrbtns[vcell]['isTrueFalse'] = False  # Marca el resultado como falso.
            mystate.myscore -= 1  # Reduce la puntuaci√≥n en 1 punto.


def ResetBoard():
    """
    Reinicia el tablero del juego.

    """
    total_cells_per_row_or_col = mystate.GameDetails[2]  # Obtiene el n√∫mero total de celdas por fila o columna.

    # Selecciona un emoji aleatorio para la barra lateral.
    sidebar_emoji_no = random.randint(1, len(mystate.emoji_bank)) - 1
    mystate.sidebar_emoji = mystate.emoji_bank[sidebar_emoji_no]

    sidebar_emoji_in_list = False  # Bandera para verificar si el emoji de la barra lateral esta en la lista de emojis de los botones.

    # Asigna emojis aleatorios a los botones que no han sido presionados.
    for vcell in range(1, ((total_cells_per_row_or_col ** 2) + 1)):
        rndm_no = random.randint(1, len(mystate.emoji_bank)) - 1
        if mystate.plyrbtns[vcell]['isPressed'] == False:
            vemoji = mystate.emoji_bank[rndm_no]
            mystate.plyrbtns[vcell]['eMoji'] = vemoji
            if vemoji == mystate.sidebar_emoji:
                sidebar_emoji_in_list = True

    # Si el emoji de la barra lateral no esta en la lista de emojis de los botones, se agrega aleatoriamente a un boton.
    if sidebar_emoji_in_list == False:
        tlst = [x for x in range(1, ((total_cells_per_row_or_col ** 2) + 1))]
        flst = [x for x in tlst if x not in mystate.expired_cells]
        if len(flst) > 0:
            lptr = random.randint(0, (len(flst) - 1))
            lptr = flst[lptr]
            mystate.plyrbtns[lptr]['eMoji'] = mystate.sidebar_emoji


def PreNewGame():
    """
        Prepara el juego para una nueva partida.

        """
    total_cells_per_row_or_col = mystate.GameDetails[2] # Obtiene el n√∫mero total de celdas por fila o columna.
    # Reinicia la lista de celdas expiradas y la puntuaci√≥n del jugador.
    mystate.expired_cells = []
    mystate.myscore = 0
    # Define listas de emojis para cada nivel de dificultad.
    foxes = ['üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ']
    emojis = ['üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò†', 'üò≥', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§í']
    humans = ['üë∂', 'üëß', 'üßí', 'üë¶', 'üë©', 'üßë', 'üë®', 'üë©‚Äçü¶±', 'üë®‚Äçü¶±', 'üë©‚Äçü¶∞', '‚Äçüë®', 'üë±', 'üë©', 'üë±', 'üë©‚Äç', 'üë®‚Äçü¶≥', 'üë©‚Äçü¶≤', 'üëµ', 'üßì', 'üë¥', 'üë≤', 'üë≥'] 
    foods = ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üåΩ', 'ü•ï', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠', 'üçî', 'üçü', 'üçï']
    clocks = ['üïì', 'üïí', 'üïë', 'üïò', 'üïõ', 'üïö', 'üïñ', 'üïô', 'üïî', 'üï§', 'üï†', 'üïï', 'üï£', 'üïû', 'üïü', 'üïú', 'üï¢', 'üï¶']
    hands = ['ü§ö', 'üñê', '‚úã', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'ü§≤', 'ü§ù', 'ü§öüèª', 'üñêüèª', '‚úãüèª', 'üññüèª', 'üëåüèª', 'ü§èüèª', '‚úåüèª', 'ü§ûüèª', 'ü§üüèª', 'ü§òüèª', 'ü§ôüèª', 'üëàüèª', 'üëâüèª', 'üëÜüèª', 'üñïüèª', 'üëáüèª', '‚òùüèª', 'üëçüèª', 'üëéüèª', '‚úäüèª', 'üëäüèª', 'ü§õüèª', 'ü§úüèª', 'üëèüèª', 'üôåüèª', 'ü§öüèΩ', 'üñêüèΩ', '‚úãüèΩ', 'üññüèΩ', 'üëåüèΩ', 'ü§èüèΩ', '‚úåüèΩ', 'ü§ûüèΩ', 'ü§üüèΩ', 'ü§òüèΩ', 'ü§ôüèΩ', 'üëàüèΩ', 'üëâüèΩ', 'üëÜüèΩ', 'üñïüèΩ', 'üëáüèΩ', '‚òùüèΩ', 'üëçüèΩ', 'üëéüèΩ', '‚úäüèΩ', 'üëäüèΩ', 'ü§õüèΩ', 'ü§úüèΩ', 'üëèüèΩ', 'üôåüèΩ']
    animals = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ü', 'ü¶ó', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'üê´', 'ü¶í', 'ü¶ò', 'üêÉ', 'üêÇ', 'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'ü¶ô', 'üêê', 'ü¶å', 'üêï', 'üê©', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üêà', 'üêì', 'ü¶É', 'ü¶ö', 'ü¶ú', 'ü¶¢', 'ü¶©', 'üêá', 'ü¶ù', 'ü¶®', 'ü¶¶', 'ü¶•', 'üêÅ', 'üêÄ', 'ü¶î']
    vehicles = ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üöì', 'üöë', 'üöí', 'üöê', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 'ü¶Ω', 'ü¶º', 'üõ¥', 'üö≤', 'üõµ', 'üõ∫', 'üöî', 'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü', 'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá', 'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üí∫', 'üöÄ', 'üõ∏', 'üöÅ', 'üõ∂', '‚õµÔ∏è', 'üö§', 'üõ≥', '‚õ¥', 'üö¢']
    houses = ['üè†', 'üè°', 'üèò', 'üèö', 'üèó', 'üè≠', 'üè¢', 'üè¨', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè®', 'üè™', 'üè´', 'üè©', 'üíí', 'üèõ', '‚õ™Ô∏è', 'üïå', 'üïç', 'üõï']
    purple_signs = ['‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôàÔ∏è', '‚ôâÔ∏è', '‚ôäÔ∏è', '‚ôãÔ∏è', '‚ôåÔ∏è', '‚ôçÔ∏è', '‚ôéÔ∏è', '‚ôèÔ∏è', '‚ôêÔ∏è', '‚ôëÔ∏è', '‚ôíÔ∏è', '‚ôìÔ∏è', 'üÜî', 'üà≥']
    red_signs = ['üà∂', 'üàöÔ∏è', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è', 'üâê', '„äôÔ∏è', '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è', 'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', 'üöº', 'üõë', '‚õîÔ∏è', 'üìõ', 'üö´', 'üö∑', 'üöØ', 'üö≥', 'üö±', 'üîû', 'üìµ', 'üö≠']
    blue_signs = ['üöæ', '‚ôøÔ∏è', 'üÖøÔ∏è', 'üàÇÔ∏è', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üöπ', 'üö∫', 'üöª', 'üöÆ', 'üé¶', 'üì∂', 'üàÅ', 'üî£', 'üî§', 'üî°', 'üî†', 'üÜñ', 'üÜó', 'üÜô', 'üÜí', 'üÜï', 'üÜì', '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üî¢', '‚èèÔ∏è', '‚ñ∂Ô∏è', '‚è∏', '‚èØ', '‚èπ', '‚è∫', '‚è≠', '‚èÆ', '‚è©', '‚è™', '‚è´', '‚è¨', '‚óÄÔ∏è', 'üîº', 'üîΩ', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨ÜÔ∏è', '‚¨áÔ∏è', '‚ÜóÔ∏è', '‚ÜòÔ∏è', '‚ÜôÔ∏è', '‚ÜñÔ∏è', '‚Ü™Ô∏è', '‚Ü©Ô∏è', '‚§¥Ô∏è', '‚§µÔ∏è', 'üîÄ', 'üîÅ', 'üîÇ', 'üîÑ', 'üîÉ', '‚ûø', 'üîö', 'üîô', 'üîõ', 'üîù', 'üîú']
    moon = ['üåï', 'üåî', 'üåì', 'üåó', 'üåí', 'üåñ', 'üåë', 'üåú', 'üåõ', 'üåô']

    random.seed()
    # Selecciona una lista de emojis aleatoria dependiendo del nivel de dificultad.
    if mystate.GameDetails[0] == 'Easy':
        wch_bank = random.choice(['foods', 'moon', 'animals'])
        mystate.emoji_bank = locals()[wch_bank]

    elif mystate.GameDetails[0] == 'Medium':
        wch_bank = random.choice(['foxes', 'emojis', 'humans', 'vehicles', 'houses', 'hands', 'purple_signs', 'red_signs', 'blue_signs'])
        mystate.emoji_bank = locals()[wch_bank]

    elif mystate.GameDetails[0] == 'Hard':
        wch_bank = random.choice(['foxes', 'emojis', 'humans', 'foods', 'clocks', 'hands', 'animals', 'vehicles', 'houses', 'purple_signs', 'red_signs', 'blue_signs', 'moon'])
        mystate.emoji_bank = locals()[wch_bank]
    # Reinicia el diccionario de botones del jugador.
    mystate.plyrbtns = {}
    for vcell in range(1, ((total_cells_per_row_or_col ** 2)+1)): mystate.plyrbtns[vcell] = {'isPressed': False, 'isTrueFalse': False, 'eMoji': ''}

def ScoreEmoji():
    """
    Asigna un emoji basado en la puntuaci√≥n del jugador.

    """
    if mystate.myscore == 0:  # Si la puntuaci√≥n es igual a cero.
        return 'üòê'  # Devuelve el emoji de expresi√≥n neutral.
    elif -5 <= mystate.myscore <= -1:  # Si la puntuaci√≥n est√° entre -5 y -1.
        return 'üòè'  # Devuelve el emoji de expresi√≥n ligeramente negativa.
    elif -10 <= mystate.myscore <= -6:  # Si la puntuaci√≥n est√° entre -10 y -6.
        return '‚òπÔ∏è'  # Devuelve el emoji de expresi√≥n negativa.
    elif mystate.myscore <= -11:  # Si la puntuaci√≥n es igual o inferior a -11.
        return 'üòñ'  # Devuelve el emoji de expresi√≥n muy negativa.
    elif 1 <= mystate.myscore <= 5:  # Si la puntuaci√≥n est√° entre 1 y 5.
        return 'üôÇ'  # Devuelve el emoji de expresi√≥n ligeramente positiva.
    elif 6 <= mystate.myscore <= 10:  # Si la puntuaci√≥n est√° entre 6 y 10.
        return 'üòä'  # Devuelve el emoji de expresi√≥n positiva.
    elif mystate.myscore > 10:  # Si la puntuaci√≥n es mayor que 10.
        return 'üòÅ'  # Devuelve el emoji de expresi√≥n muy positiva.


def NewGame():
    ResetBoard()# Reinicia el tablero del juego
    total_cells_per_row_or_col = mystate.GameDetails[2]# Obtiene el n√∫mero total de celdas por fila o columna

    ReduceGapFromPageTop('sidebar')  # Reducci√≥n del espacio desde la parte superior de la p√°gina
    with st.sidebar:
        st.subheader(f"üñºÔ∏è Pix Match: {mystate.GameDetails[0]}")# Encabezado de la barra lateral con el nivel de dificultad seleccionado
        st.markdown(horizontal_bar, True)# L√≠nea horizontal decorativa

        st.markdown(sbe.replace('|fill_variable|', mystate.sidebar_emoji), True) # Muestra el emoji de la barra lateral

        aftimer = st_autorefresh(interval=(mystate.GameDetails[1] * 1000), key="aftmr")# Actualiza autom√°ticamente el temporizador en la barra lateral
        if aftimer > 0: mystate.myscore -= 1 # Reduce el puntaje si el temporizador est√° en funcionamiento

        st.info(f"{ScoreEmoji()} Score: {mystate.myscore} | Pending: {(total_cells_per_row_or_col ** 2) - len(mystate.expired_cells)}")

        st.markdown(horizontal_bar, True)
        if st.button(f"üîô Return to Main Page", use_container_width=True):
            mystate.runpage = Main
            st.rerun()

    Leaderboard('read')
    st.subheader("Picture Positions:")
    st.markdown(horizontal_bar, True)

    # Set Board Dafaults
    st.markdown("<style> div[class^='css-1vbkxwb'] > p { font-size: 1.5rem; } </style> ", unsafe_allow_html=True)  # make button face big
    errores = 0
    for i in range(1, (total_cells_per_row_or_col+1)):
        tlst = ([1] * total_cells_per_row_or_col) + [2] # 2 = rt side padding
        globals()['cols' + str(i)] = st.columns(tlst)

    for vcell in range(1, (total_cells_per_row_or_col ** 2)+1):
        if errores == (total_cells_per_row_or_col ** 1)+1:
            mystate.runpage = Main
            st.rerun()
            break
        if 1 <= vcell <= (total_cells_per_row_or_col * 1):
            arr_ref = '1'
            mval = 0

        elif ((total_cells_per_row_or_col * 1)+1) <= vcell <= (total_cells_per_row_or_col * 2):
            arr_ref = '2'
            mval = (total_cells_per_row_or_col * 1)

        elif ((total_cells_per_row_or_col * 2)+1) <= vcell <= (total_cells_per_row_or_col * 3):
            arr_ref = '3'
            mval = (total_cells_per_row_or_col * 2)

        elif ((total_cells_per_row_or_col * 3)+1) <= vcell <= (total_cells_per_row_or_col * 4):
            arr_ref = '4'
            mval = (total_cells_per_row_or_col * 3)

        elif ((total_cells_per_row_or_col * 4)+1) <= vcell <= (total_cells_per_row_or_col * 5):
            arr_ref = '5'
            mval = (total_cells_per_row_or_col * 4)

        elif ((total_cells_per_row_or_col * 5)+1) <= vcell <= (total_cells_per_row_or_col * 6):
            arr_ref = '6'
            mval = (total_cells_per_row_or_col * 5)

        elif ((total_cells_per_row_or_col * 6)+1) <= vcell <= (total_cells_per_row_or_col * 7):
            arr_ref = '7'
            mval = (total_cells_per_row_or_col * 6)

        elif ((total_cells_per_row_or_col * 7)+1) <= vcell <= (total_cells_per_row_or_col * 8):
            arr_ref = '8'
            mval = (total_cells_per_row_or_col * 7)

        elif ((total_cells_per_row_or_col * 8)+1) <= vcell <= (total_cells_per_row_or_col * 9):
            arr_ref = '9'
            mval = (total_cells_per_row_or_col * 8)

        elif ((total_cells_per_row_or_col * 9)+1) <= vcell <= (total_cells_per_row_or_col * 10):
            arr_ref = '10'
            mval = (total_cells_per_row_or_col * 9)

        globals()['cols' + arr_ref][vcell-mval] = globals()['cols' + arr_ref][vcell-mval].empty()
        if mystate.plyrbtns[vcell]['isPressed'] == True:
            if mystate.plyrbtns[vcell]['isTrueFalse'] == True:
                globals()['cols' + arr_ref][vcell-mval].markdown(pressed_emoji.replace('|fill_variable|', '‚úÖÔ∏è'), True)

            elif mystate.plyrbtns[vcell]['isTrueFalse'] == False:
                globals()['cols' + arr_ref][vcell-mval].markdown(pressed_emoji.replace('|fill_variable|', '‚ùå'), True)
                errores+=1

        else:
            vemoji = mystate.plyrbtns[vcell]['eMoji']
            globals()['cols' + arr_ref][vcell-mval].button(vemoji, on_click=PressedCheck, args=(vcell, ), key=f"B{vcell}")

    st.caption('') # vertical filler
    st.markdown(horizontal_bar, True)

    if len(mystate.expired_cells) == (total_cells_per_row_or_col ** 2) :
        Leaderboard('write')

        if mystate.myscore > 0: st.balloons()
        elif mystate.myscore <= 0: st.snow()

        tm.sleep(5)
        mystate.runpage = Main
        st.rerun()


def Main():
    """
    Funcion principal que configura la interfaz de usuario y maneja las acciones del juego.
    Esta establece la apariencia de la interfaz de usuario, incluido el ancho de la barra lateral y el color de los botones.
    Tambi√©n presenta la p√°gina inicial y proporciona opciones para seleccionar el nivel de dificultad del juego y el nombre del jugador.
    Adem√°s, permite iniciar un nuevo juego y actualiza la interfaz de usuario en consecuencia.
    """

    st.markdown('<style>[data-testid="stSidebar"] > div:first-child {width: 310px;}</style>', unsafe_allow_html=True)  # Reduce el ancho de la barra lateral
    st.markdown(purple_btn_colour, unsafe_allow_html=True)  # Establece el color de los botones en p√∫rpura

    InitialPage()  # Muestra la p√°gina inicial

    with st.sidebar:
        # Permite al usuario seleccionar el nivel de dificultad y proporcionar el nombre del jugador
        mystate.GameDetails[0] = st.radio('Difficulty Level:', options=('Easy', 'Medium', 'Hard'), index=1,horizontal=True, )
        mystate.GameDetails[3] = st.text_input("Player Name, Country", placeholder='Shawn Pereira, India',help='Optional input only for Leaderboard')


        # Bot√≥n para iniciar un nuevo juego
        if st.button(f"üïπÔ∏è New Game", use_container_width=True):
            # Configura los detalles del juego seg√∫n el nivel de dificultad seleccionado
            if mystate.GameDetails[0] == 'Easy':
                mystate.GameDetails[1] = 8  # Intervalo de tiempo en segundos
                mystate.GameDetails[2] = 6  # Celdas totales por fila o columna

            elif mystate.GameDetails[0] == 'Medium':
                mystate.GameDetails[1] = 6  # Intervalo de tiempo en segundos
                mystate.GameDetails[2] = 7  # Celdas totales por fila o columna

            elif mystate.GameDetails[0] == 'Hard':
                mystate.GameDetails[1] = 5  # Intervalo de tiempo en segundos
                mystate.GameDetails[2] = 8  # Celdas totales por fila o columna

            Leaderboard('create')  # Crea la tabla de clasificaci√≥n

            PreNewGame()  # Prepara el nuevo juego
            mystate.runpage = NewGame  # Establece la p√°gina de juego
            st.rerun()  # Reinicia la interfaz de usuario para iniciar el nuevo juego

        st.markdown(horizontal_bar, True)  # L√≠nea divisoria en la barra lateral


if 'runpage' not in mystate:
    mystate.runpage = Main  # Establece la pagina principal como la pagina de inicio por defecto
mystate.runpage()  # Ejecuta la p√°gina activa puede ser Main o NewGame